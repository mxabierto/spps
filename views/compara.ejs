<!DOCTYPE html>
<html lang="es">


<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title><%= title %></title>

    <!-- Bootstrap -->
    <link href="/bower_components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">
    <!--<link href="/bower_components/bootstrap/dist/css/bootstrap-theme.min.css" rel="stylesheet">-->
    <link href="/stylesheets/main.css" rel="stylesheet">


    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- load the d3.js library -->
    <script src="https://d3js.org/d3.v4.min.js"></script>

    <style>
        body{
            padding-top: 70px;
        }
        path {
            stroke: steelblue;
            stroke-width: 3;
            fill: none;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: grey;
            stroke-width: 1;
            shape-rendering: crispEdges;
        }
        .legend {
            font-size: 12px;
            font-weight: bold;
            text-anchor: middle;
        }
    </style>

    <link rel="stylesheet" href="/bower_components/font-awesome/css/font-awesome.min.css">
    <link rel="stylesheet" href="http://libs.cartocdn.com/cartodb.js/v3/3.15/themes/css/cartodb.css" />
    <link rel="shortcut icon" href="http://cartodb.com/assets/favicon.ico" />


</head>
<body>

    <% include navbar.ejs %>
    <div class="container-fluid">
        <h1>Recién nacidos con bajo peso</h1>
        <h3>Esta gráfica muestra los valores del indicador a través del tiempo.</h3>

        <div id="lines"></div>
        <script>

            // Set the dimensions of the canvas / graph
            var margin = {top: 30, right: 20, bottom: 50, left: 50},
                width = 1000 - margin.left - margin.right,
                height = 500 - margin.top - margin.bottom;

            // Parse the date / time
           var parseDate = d3.timeParse("%Y");

            // Set the ranges
            var x = d3.scaleTime().range([0, width]);
            var y = d3.scaleLinear().range([height, 0]);

            // Define the line
            var priceline = d3.line()
                .x(function(d) { return x(d.date); })
                .y(function(d) { return y(d.price); });

            // Adds the svg canvas
            var svg = d3.select("#lines")
                .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                .append("g")
                    .attr("transform",
                          "translate(" + margin.left + "," + margin.top + ")");

            // Get the data
            d3.csv('/tiempo159.csv', function(error, data) {
                data.forEach(function(d) {
                    d.date = parseDate(d.date);
                    d.price = +d.price;
                });

                // Scale the range of the data
                x.domain(d3.extent(data, function(d) { return d.date; }));
                y.domain([0, d3.max(data, function(d) { return d.price; })]);

                // Nest the entries by symbol
                var dataNest = d3.nest()
                    .key(function(d) {return d.symbol;})
                    .entries(data);

                // set the colour scale
                var color = d3.scaleOrdinal(d3.schemeCategory10);

                legendSpace = width/dataNest.length; // spacing for the legend

                // Loop through each symbol / key
                dataNest.forEach(function(d,i) {

                    svg.append("path")
                        .attr("class", "line")
                        .style("stroke", function() { // Add the colours dynamically
                            return d.color = color(d.key); })
                        .attr("d", priceline(d.values));
                    // Add the Legend
                    svg.append("text")
                        .attr("x", (legendSpace/2)+i*legendSpace)  // space legend
                        .attr("y", height + (margin.bottom/2)+ 20)
                        .attr("class", "legend")    // style the legend
                        .style("fill", function() { // Add the colours dynamically
                            return d.color = color(d.key); })
                        .text(d.key);

                });

                // Add the X Axis
                svg.append("g")
                    .attr("class", "axis")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x));

                // Add the Y Axis
                svg.append("g")
                    .attr("class", "axis")
                    .call(d3.axisLeft(y));

            });

        </script>

    </div>

</body>
</html>